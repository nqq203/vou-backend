version: "3.8"

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/redis
    networks:
      - microservices-network
      
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - microservices-network

  nginx:
    image: nginx:latest
    build:
      context: ./src/nginx
      dockerfile: dockerfile
    ports:
      - "8080:80"
      - "443:443"
    depends_on:
      - auth-service
      - user-service
      - event-service
      - statistics-service
      - streaming-service
      - inventory-and-reward-service
    volumes:
      - ./src/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - microservices-network

  auth-service: 
    image: auth-service:latest
    build:
      context: ./src/auth-service
    ports: 
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: auth-service
      SERVER_PORT: 8081
    volumes:
      - auth-service-data:/var/auth-service
      - maven-repo:/root/.m2
    networks: 
      - microservices-network

  user-service: 
    image: user-service:latest
    build:
      context: ./src/user-service
    volumes:
      - user-service-data:/var/user-service
      - maven-repo:/root/.m2
    ports: 
      - "8082:8082"
    depends_on:
      - user-database
    environment: 
      SPRING_APPLICATION_NAME: user-service
      SERVER_PORT: 8082
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-database:5432/user
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_GENERATE_DDL: "true"
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: nqquy21@clc.fitus.edu.vn
      SPRING_MAIL_PASSWORD: ljkwzpvsurwnejai
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "true"
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
      SPRINGDOC_API_DOCS_PATH: /v3/api-docs
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
      SPRING_PROFILES_ACTIVE: prod
    networks:  
      - microservices-network

  event-service: 
    image: event-service:latest
    build:
      context: ./src/event-service
    ports: 
      - "8083:8083"
    depends_on:
      - event-database
    environment: 
      SPRING_APPLICATION_NAME: event-service
      SERVER_PORT: 8083
      SPRING_DATASOURCE_URL: jdbc:postgresql://event-database:5432/event
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_GENERATE_DDL: "true"
    volumes:
      - event-service-data:/var/event-service
      - maven-repo:/root/.m2
    networks: 
      - microservices-network

  statistics-service:
     image: statistics-service:latest
     build:
       context: ./src/statistics-service
     ports:
       - "8015:8015"
     depends_on:
       - statistics-database
     environment:
       SPRING_APPLICATION_NAME: statistics-service
       SERVER_PORT: 8015
       SPRING_DATASOURCE_URL: jdbc:postgresql://statistics-database:5432/statistics
       SPRING_DATASOURCE_USERNAME: admin
       SPRING_DATASOURCE_PASSWORD: admin
       SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
       SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
       SPRING_JPA_HIBERNATE_DDL_AUTO: update
       SPRING_JPA_SHOW_SQL: "true"
       SPRING_JPA_GENERATE_DDL: "true"
     volumes:
       - statistics-service-data:/var/statistics-service
       - maven-repo:/root/.m2
     networks:
       - microservices-network

  streaming-service: 
    image: streaming-service:latest
    build:
      context: ./src/streaming-service
    ports: 
      - "8086:8086"
      - "8085:8085" 
    depends_on:
      - game-database
      - kafka
    environment: 
      SPRING_APPLICATION_NAME: streaming-service
      SERVER_PORT: 8086 # Make sure to use the correct port
      SOCKET_SERVER_PORT: 8085
      SERVER_HOST: 0.0.0.0 # Ensure this IP is reachable within your network
      SPRING_REDIS_HOST: redis # Assuming you have a Redis service in the same network
      SPRING_REDIS_PORT: 6379
      SPRING_DATASOURCE_URL: jdbc:postgresql://game-database:5432/game
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_GENERATE_DDL: "true"
      TZ: Asia/Ho_Chi_Minh
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: group_id
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
    volumes:
      - streaming-service-data:/var/streaming-service
      - maven-repo:/root/.m2
    networks: 
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://streaming-service:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"


  inventory-and-reward-service: 
    image: inventory-and-reward-service:latest
    build:
      context: ./src/inventory-and-reward-service
    ports: 
      - "8087:8087"
    depends_on:
      - inventory-database
    environment: 
      SPRING_APPLICATION_NAME: inventory-and-reward-service
      SERVER_PORT: 8087
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-database:5432/inventory
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_GENERATE_DDL: "true"
    volumes:
      - inventory-and-reward-service-data:/var/inventory-and-reward-service
      - maven-repo:/root/.m2
    networks: 
      - microservices-network

  pgadmin:
    image: elestio/pgadmin:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8888:80"
    depends_on:
      - user-database
      - inventory-database
      - game-database
      - event-database
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - microservices-network

  user-database:
    image: postgres:16.3-bullseye
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - user-data:/var/lib/postgresql/data
      - ./assets/v1/V1__user.sql:/docker-entrypoint-initdb.d/V1__user.sql
    networks:
      - microservices-network

  game-database:
    image: postgres:16.3-bullseye
    environment:
      POSTGRES_DB: game
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - game-data:/var/lib/postgresql/data
      - ./assets/v1/V1__game.sql:/docker-entrypoint-initdb.d/V1__game.sql
    networks:
      - microservices-network

  event-database:
    image: postgres:16.3-bullseye
    environment:
      POSTGRES_DB: event
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5434:5432"
    volumes:
      - event-data:/var/lib/postgresql/data
      - ./assets/v1/V1__event.sql:/docker-entrypoint-initdb.d/V1__event.sql
    networks:
      - microservices-network

  inventory-database:
    image: postgres:16.3-bullseye
    environment:
      POSTGRES_DB: inventory
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5435:5432"
    volumes:
      - inventory-data:/var/lib/postgresql/data
      - ./assets/v1/V1__inventory_and_reward.sql:/docker-entrypoint-initdb.d/V1__inventory_and_rewards.sql
    networks:
      - microservices-network

  statistics-database:
    image: postgres:16.3-bullseye
    environment:
      POSTGRES_DB: statistics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5436:5432"
    volumes:
      - statistics-data:/var/lib/postgresql/data
      - ./assets/v1/V1__statistics.sql:/docker-entrypoint-initdb.d/V1__statistics.sql
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  auth-service-data:
  user-service-data:
  event-service-data:
  statistics-service-data:
  streaming-service-data:
  inventory-and-reward-service-data:
  pgadmin-data:
  statistics-data:
  user-data:
  game-data:
  event-data:
  inventory-data:
  redis-data:
  maven-repo:
    driver: local